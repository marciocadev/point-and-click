/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/character.glb -o ./src/components/Character.jsx 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useFrame, useGraph } from '@react-three/fiber'

const MOVEMENT_SPEED = 0.032

export function Character({
  color,
  ...props
}) {
  const position = useMemo(() => props.position, []);

  const group = useRef()
  const { scene, materials, animations } = useGLTF('models/character.glb')
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes } = useGraph(clone)

  const { actions } = useAnimations(animations, group)
  const [animation, setAnimation] = useState("Idle")

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play()
    return () => actions[animation]?.fadeOut(0.5)
  }, [animation])

  useFrame(() => {
    if (group.current.position.distanceTo(props.position) > 0.1) {
      const direction = group.current.position
        .clone()
        .sub(props.position)
        .normalize()
        .multiplyScalar(MOVEMENT_SPEED);
      group.current.position.sub(direction);
      group.current.lookAt(props.position);
      setAnimation("Walk");
    } else {
      setAnimation("Idle");
    }
  })

  return (
    <group ref={group} {...props} position={position} dispose={null}>
      <group name="Scene">
        <group name="Character" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Beta_Joints"
            geometry={nodes.Beta_Joints.geometry}
            material={materials.Beta_Joints_MAT1}
            skeleton={nodes.Beta_Joints.skeleton}>
          </skinnedMesh>
          <skinnedMesh name="Beta_Surface"
            geometry={nodes.Beta_Surface.geometry}
            material={materials.Beta_HighLimbsGeoSG3}
            skeleton={nodes.Beta_Surface.skeleton}>
            <meshStandardMaterial color={color} />
          </skinnedMesh>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('models/character.glb')
